
import os
import logging
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, CallbackContext,
    ConversationHandler
)
from dotenv import load_dotenv
from utils import check_password, verify_user, is_verified, change_password, txt_to_vcf, load_config

# Load environment variables
load_dotenv()
TOKEN = "7228313489:AAFS1N8i-Q1sB8Y93jm9IkMKXGp46ZBOOoY"
OWNER_ID = 7706131450  # Replace with your actual Telegram user ID

# Configure logging
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

# Conversation states
PASSWORD, FILE, CONTACT_NAME, VCF_NAME = range(4)

# Start command
async def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    context.user_data.clear()  # Reset user data
    await update.message.reply_text("üîê Enter the bot password to continue:")
    return PASSWORD

# Password handler
async def password_handler(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    password = update.message.text.strip()

    if is_verified(user_id):
        await update.message.reply_text("‚úÖ You are already verified! Send a .txt file to convert.")
        return FILE

    if check_password(user_id, password):
        verify_user(user_id)
        await update.message.reply_text("‚úÖ Password correct! Now send a .txt file to convert.")
        return FILE
    else:
        await update.message.reply_text("‚ùå Incorrect password. Try again.")
        return PASSWORD

# Handle received text files
async def handle_document(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id

    if not is_verified(user_id):
        await update.message.reply_text("‚ùå You must enter the correct password first.")
        return PASSWORD

    file = update.message.document
    if file.mime_type != "text/plain":
        await update.message.reply_text("‚ùå Please send a valid .txt file.")
        return FILE

    file_path = f"downloads/{file.file_name}"
    os.makedirs("downloads", exist_ok=True)
    new_file = await file.get_file()
    await new_file.download_to_drive(file_path)

    context.user_data["file_path"] = file_path
    await update.message.reply_text("üìå Enter a base name for contacts (or type 'auto' to auto-generate).")
    return CONTACT_NAME

# Handle contact naming
async def handle_contact_name(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    name = update.message.text.strip()

    if "file_path" not in context.user_data:
        await update.message.reply_text("‚ùå Please send a .txt file first.")
        return FILE

    context.user_data["contact_name"] = name
    await update.message.reply_text("üìå Now enter a name for the .vcf file.")
    return VCF_NAME

# Handle VCF file naming
async def handle_vcf_name(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    vcf_name = update.message.text.strip()

    if "contact_name" not in context.user_data:
        await update.message.reply_text("‚ùå Please enter the contact name first.")
        return CONTACT_NAME

    txt_file = context.user_data["file_path"]
    contact_name = context.user_data["contact_name"]
    vcf_file = f"downloads/{vcf_name}.vcf"

    txt_to_vcf(txt_file, vcf_file, contact_name)

    await update.message.reply_document(document=open(vcf_file, "rb"), filename=vcf_name + ".vcf")
    await update.message.reply_text("‚úÖ Here is your converted .vcf file!")

    context.user_data.clear()  # Clear user data
    return FILE  # Allow user to send another file without restarting

# Change password (owner only)
async def change_password_command(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id != OWNER_ID:
        await update.message.reply_text("‚ùå You are not authorized to change the password.")
        return

    if len(context.args) != 1:
        await update.message.reply_text("Usage: /changepass <new_password>")
        return

    new_password = context.args[0]
    change_password(new_password)
    await update.message.reply_text("üîí Password has been changed. All users must re-enter the new password.")

# Help command
async def help_command(update: Update, context: CallbackContext):
    help_text = """
üîπ Send a .txt file to convert it to .vcf.
üîπ If no contact names are found, you will be asked to enter one.
üîπ You can rename the .vcf file before receiving it.
üîπ Commands:
  /start - Restart from the beginning
  /changepass <new_pass> - Change password (Owner only)
  /status - Check bot status
  /help - Show this help menu
"""
    await update.message.reply_text(help_text)

# Status command
async def status_command(update: Update, context: CallbackContext):
    config = load_config()
    verified_count = len(config["verified_users"])
    await update.message.reply_text(f"‚úÖ Bot is running.\nüë• Verified users: {verified_count}")

# Cancel command
async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("‚ùå Process cancelled. Send /start to begin again.")
    return ConversationHandler.END

# Main function
def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, password_handler)],
            FILE: [MessageHandler(filters.Document.ALL & filters.Document.MimeType("text/plain"), handle_document)],
            CONTACT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact_name)],
            VCF_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_vcf_name)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("changepass", change_password_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("status", status_command))

    app.run_polling()

if __name__ == "__main__":
    main()